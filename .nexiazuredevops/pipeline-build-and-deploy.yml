pr: none
trigger: none
pool:
  vmImage: 'ubuntu-latest'
parameters:
  - name: env
    displayName: Environment to deploy
    type: string
    values:
      - dev
      - sit
variables:
  repository: 'mock-ec' 
  dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
  kustomizeFolderApp: '$(Build.SourcesDirectory)/kustomize-mock-ec'
  mock_ec_primary_var: 'mock-ec-primary'
  mock_ec_secondary_var: 'mock-ec-secondary'

stages:
  - stage: retrieve_info
    displayName: "Retrieve info (${{ parameters.env }})"
    jobs:
      - job: retrieve_info
        displayName: "Retrieve info (${{ parameters.env }})"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              APP_VERSION=$(jq -r .version package.json)
              echo "##vso[task.setvariable variable=APP_VERSION;isOutput=true]$APP_VERSION"
            displayName: Set version
            name: getVar
  - stage: build
    displayName: "Build (${{ parameters.env }})"
    condition: succeeded()
    dependsOn:
      - retrieve_info
    variables:
      - group: nodo-integration-test-${{ parameters.env }}
      - name: appVersion
        value: $[ stageDependencies.retrieve_info.retrieve_info.outputs['getVar.APP_VERSION'] ]
    jobs:
      - job: build_npm
        displayName: buildnpm
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.x'
          displayName: 'Install Node.js'
        - script: |
            npm install --legacy-peer-deps
          displayName: 'npm install'
        - script: |
            npm run generate build
            pwd
            ls -lrt
          displayName: 'npm build'
        - script: |
            cp .nexi.env .env
          displayName: 'Copy env'
        - task: Docker@2
          displayName: 'Build and push image'
          inputs:
              containerRegistry: $(container-registry-service-connection-${{ parameters.env }})
              repository: $(repository)
              command: 'buildAndPush'
              Dockerfile: $(dockerfile)
              tags: $(appVersion)


  - stage: push_manifest_mock_ec_primary
    displayName: "Push manifest $(mock_ec_primary_var) - (${{ parameters.env }})"
    condition: succeeded()
    dependsOn:
      - retrieve_info
      - build
    variables:
      - group: nodo-integration-test-${{ parameters.env }}
      - name: appVersion  
        value: $[ stageDependencies.retrieve_info.retrieve_info.outputs['getVar.APP_VERSION'] ]
    jobs:
      - job: push_manifest_mock_ec_primary
        displayName: "Push manifest $(mock_ec_primary_var) - ${{ parameters.env }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - task: KubernetesManifest@0
            name: "bakeApp"
            inputs:
              action: "bake"
              renderType: 'kustomize'
              kustomizationPath: $(kustomizeFolderApp)/$(mock_ec_primary_var)/${{ parameters.env }}
              containers: $(repository-docker-${{ parameters.env }})/$(repository):$(appVersion)
            displayName: "Create manifest $(mock_ec_primary_var) app (${{ parameters.env }})"
          - publish: $(bakeApp.manifestsBundle)
            displayName: "Publish manifest $(mock_ec_primary_var) app (${{ parameters.env }})"
            artifact: $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)

            
  - stage: deploy_mock_ec_primary
    displayName: "Deploy $(mock_ec_primary_var) - (${{ parameters.env }})"
    dependsOn:
      - retrieve_info
      - build
      - push_manifest
    variables:
      - group: nodo-integration-test-${{ parameters.env }}
      - name: appVersion
        value: $[ stageDependencies.retrieve_info.retrieve_info.outputs['getVar.APP_VERSION'] ]
    condition: succeeded()
    jobs:
      - job: deploy_mock_ec_primary
        displayName: "Deploy $(mock_ec_primary_var) - ${{ parameters.env }}"
        pool: $(deploy-pool-${{ parameters.env }})
        steps:
          - checkout: none
          - script: |
              ls -la $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)
              rm -rf $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)
            displayName: "Clean old cached files $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)"
          - download: current
            artifact: $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)
            displayName: "Download manifest $(repository) app $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)"
          - task: KubernetesManifest@0
            displayName: "Deploy manifest for $(repository) app"
            inputs:
              action: 'deploy'
              kubernetesServiceConnection:  $(kubernetes-service-connection-mock-ec-${{ parameters.env }})
              namespace: $(mock-ec-kubernetes-namespace-${{ parameters.env }})
              manifests: $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_primary_var)/*.yaml


  - stage: push_manifest_mock_ec_secondary
    displayName: "Push manifest $(mock_ec_secondary_var) - (${{ parameters.env }})"
    condition: succeeded()
    dependsOn:
      - retrieve_info
      - build
    variables:
      - group: nodo-integration-test-${{ parameters.env }}
      - name: appVersion  
        value: $[ stageDependencies.retrieve_info.retrieve_info.outputs['getVar.APP_VERSION'] ]
    jobs:
      - job: push_manifest_mock_ec_secondary
        displayName: "Push manifest $(mock_ec_secondary_var) - ${{ parameters.env }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - task: KubernetesManifest@0
            name: "bakeApp"
            inputs:
              action: "bake"
              renderType: 'kustomize'
              kustomizationPath: $(kustomizeFolderApp)/$(mock_ec_secondary_var)/${{ parameters.env }}
              containers: $(repository-docker-${{ parameters.env }})/$(repository):$(appVersion)
            displayName: "Create manifest $(mock_ec_secondary_var) app (${{ parameters.env }})"
          - publish: $(bakeApp.manifestsBundle)
            displayName: "Publish manifest $(mock_ec_secondary_var) app (${{ parameters.env }})"
            artifact: $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)

            
  - stage: deploy_mock_ec_secondary
    displayName: "Deploy $(mock_ec_secondary_var) - (${{ parameters.env }})"
    dependsOn:
      - retrieve_info
      - build
      - push_manifest
    variables:
      - group: nodo-integration-test-${{ parameters.env }}
      - name: appVersion
        value: $[ stageDependencies.retrieve_info.retrieve_info.outputs['getVar.APP_VERSION'] ]
    condition: succeeded()
    jobs:
      - job: deploy_mock_ec_secondary
        displayName: "Deploy $(mock_ec_secondary_var) - ${{ parameters.env }}"
        pool: $(deploy-pool-${{ parameters.env }})
        steps:
          - checkout: none
          - script: |
              ls -la $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)
              rm -rf $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)
            displayName: "Clean old cached files $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)"
          - download: current
            artifact: $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)
            displayName: "Download manifest $(repository) app $(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)"
          - task: KubernetesManifest@0
            displayName: "Deploy manifest for $(repository) app"
            inputs:
              action: 'deploy'
              kubernetesServiceConnection:  $(kubernetes-service-connection-mock-ec-${{ parameters.env }})
              namespace: $(mock-ec-kubernetes-namespace-${{ parameters.env }})
              manifests: $(Pipeline.Workspace)/$(appVersion)-${{ parameters.env }}-$(repository)-manifest-app-$(mock_ec_secondary_var)/*.yaml