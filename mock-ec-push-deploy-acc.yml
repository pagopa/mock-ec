name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

# Don't run against PRs
pr: none

variables:
  - name: repository
    value: 'pagopa-mock-ec'
  - name: dockerfile
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: containerRegistry
    value: 'nodo_srv_endpoint_azurecr_sit'
  - name: aksnamespace
    value: 'nodo-sit'
  - name: kubernetesServiceConnection
    value: 'nodo_srv_endpoint_kubernetes_sa_sit'

# Agent VM image name
#vmImageName: 'ubuntu-latest'
    
stages:
#BUILD
  - stage: Build
    displayName: Build and push stage
    jobs:
    - job: Build
      displayName: Build job
      steps:
      
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:  
          command: buildAndPush  
          repository: ${{ variables.repository }}  
          dockerfile: ${{ variables.dockerfile }}  
          containerRegistry: ${{ variables.containerRegistry }}  
          tags: |
            $(Build.BuildId)
            $(Build.SourceVersion)
      - task: CopyFiles@2
        displayName: Copy kube manifests
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/deployment/kube-manifests'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          OverWrite: true
          
      - task: PublishBuildArtifacts@1
        displayName: Publish manifests Artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'kube-manifests'
          publishLocation: 'Container'
          
  #DEPLOY        
  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy job
      #pool:
        #vmImage: $(vmImageName)
      environment: ${{ variables.aksnamespace }}  
      strategy:
        runOnce:
          deploy:
            steps:
            #- script: |
                #sudo apt-get update
                #sudo apt-get install jq
              #displayName: 'Install jq JSON processor'
            #- script: |
                #version_val=$(jq -r '.version' package.json)
                #echo "$version_val" 
              #displayName: 'Extract version value'        
            - download: none
            - task: DownloadPipelineArtifact@2
              inputs:
                artifactName: 'k8s-manifests'
                downloadPath: '$(System.ArtifactsDirectory)'
  
            #- task: KubernetesManifest@0
              #displayName: Create imagePullSecret
              #inputs:
                #action: createSecret
                #secretName: $(imagePullSecret)
                #namespace: $(k8sNamespace)
                #dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
            - task: KubernetesManifest@0
              displayName: Create K8S manifest files
              name: bake
              inputs:
                action: bake
                renderType: kustomize
                kustomizationPath: '$(System.ArtifactsDirectory)/app' # Location of the kustomization file

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                namespace: ${{ variables.aksnamespace }}
                kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                manifests: |
                  $(bake.manifestsBundle)
                #imagePullSecrets: |
                  #$(imagePullSecret)
                containers: |
                  ${{ variables.containerRegistry}}/${{ variables.repository}}:1.6.1